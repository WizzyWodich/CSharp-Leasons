using System;

// Типы данных

namespace Lessons_1
{
    // Разрядность, то количество байтов, которое переменная с определенным типом данных будет занимать в оперативной памяти (в стеке).
    // 1 байт = 8 бит.
    class Program
    {
        static void Main(string[] args)
        {
            int variable; // Переменная объявлена, но не инициализирована.
            int variable_2 = 102; // Переменная объявлена и инициализирована числом.

            var a = 10; /* var - это тип данных, который автоматически определяет тип данных переменной (если переменная содержит строку, тип будет string и т.д)
                        * Использование var - это неявная типизация переменной. Хорошее применение в циклах.
                        * Выделение памяти - ?
                        */
            // var Var; Неявно типизированный должен быть сразу объявлен.
            // var Var_1 = null; Нельзя указывать в качестве значения null.

            // Числовые типы данных:
            byte bit1 = 1; // Хранит целое число от 0 до 255 и занимает 1 байт. .NET - Byte

            sbyte bit_1 = -1; // Хранит целое число от -128 до 127 и занимает 1 байт. .NET - SByte


            short n1 = -1; // Хранит целое число от -32768 до 32767 и занимает 2 байта. .NET - Int16

            ushort n2 = 1; // Хранит целое число от 0 до 65535 и занимает 2 байта. .NET - UInt16

            int n3 = 10; // Хранит целое число от -2147483648 до 2147483647 и занимает 4 байта. .NET - Int32

            uint n4 = 1U; // Хранит целое число от 0 до 4294967295 и занимает 4 байта. .NET - UInt32

            long n5 = 1L; // Хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт. .NET - Int64

            ulong n6 = 1UL; // Хранит целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт. .NET - UInt64


            // Типы данных с плавающей точкой:

            float n7 = 1.55555F; // Хранит число с плавающей точкой от -3.4 * 1038 до 3.4 * 1038 и занимает 4 байта. .NET - Single

            double n8 = 2.77777777777777D; // Хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байт. .NET - Double

            decimal n9 = 1005.8M; // Хранит десятичное дробное число. Если используется без десятичной запятой, имеет значение от ±1.0*10-28 до ±7.9228*1028,
                                  // может хранить 28 знаков после запятой и занимает 16 байт. .NET - Decimal

            // Символьные типы данных:

            char n10 = 'a'; // Хранит одиночный символ в кодировке Unicode и занимает 2 байта. .NET - Char

            string n11 = "Hello world"; // Хранит набор символов Unicode. .NET - String



            // Может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе.
            // Представлен системным типом System.Object, который является базовым для всех других типов и классов .NET.
            object obj = 22;
            object b = 3.14;
            object c = "Hello Code!";


            // Хранит значение true или false (логические литералы). .NET - Boolean
            bool yes = true;
            bool no = false;

            /* Что такое .NET - Boolean? Определение или то, как записан (называется) тип данных в .NET, то есть 
             * bool = System.Boolean, это более заметно, когда используется преобразование в определенный тип данных. Поскольку C# воспринимает все 
             * в строках.
             */

            /* Суффиксы - При присвоении значений нужно иметь в виду следующую тонкость: все вещественные литералы 
             * (дробные числа) рассматриваются как значения типа double. И чтобы указать, что дробное число представляет тип float или тип decimal,
             * необходимо к литералу добавлять суффикс: F/f - для float и M/m - для decimal.
             * Аналогичным образом все целочисленные литералы рассматриваются как значения типа int. Чтобы явным образом указать, что 
             * целочисленный литерал представляет значение типа uint, нужно использовать суффикс U/u, для типа long - суффикс L/l, 
             * а для типа ulong - суффикс UL/ul:
             */
        }
    }
}
