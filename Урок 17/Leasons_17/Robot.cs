using System;

namespace Leasons_17{
    /*Класс Robot с полями конструкторами и методами а так же статический метод*/
    class Robot{

        private static int count;
        
        /* И так аксессоры get set. За счет аксессоров мы можем контролировать установки/получения даных из каких нибудь полей у нас есть три основных поля (не стичаем статическрое)
        Сейчас мы получаем даные через написаные методы и конструкторы но мы так же можем использовать аксессор который будет принадлежать к определенному полю и расписать что конкретно будет происходить приего устоновки данных в поле.
        */
        
        private string name; // Поле класса
        private int weight;  
        private byte[] coordinates;

        // Пишем аксессор обычно для него нужно public (можно устанавливать дургие модификаторы доступа)
        // <Модификатор доступа> <Тип данных> <Название для аксессора> !! Обычно название записываеться первая буква в верхнем регистре.
        // Похоже на метод но нету '()'
        // get срабатывает при попытке получения данных из какого либо поля.
        // set срабатывает когда мы хотим что то установить в данный аксессор(а уже аксессор устанавливает в поле).
        public int Weight{
            get{
                System.Console.WriteLine("Результат: ");
                return this.weight;  // Теперь мы можем обратиться к аксессору что бы сделать выводо в консоль или получить информацию из поля 'weight' 
                                    // можно обращяться и к другим полям но нужно что бы тип даных совпадал.
            }
            set{
                if(value < 1) // (Безопастность) Если пользователь передаст число меньше 1 то мы не будем устанавливать его значение мы автоматически установим 1.
                    this.weight = 1;
                else if(value > 5000) // Если пользователь пытаеться установить значение больше 5000 то автомиатически будет вписано 5000 (лимит/максимум)
                    this.weight = 5000;
                else // А если число больше 1 то мы установим его данные в поле.
                    this.weight = value; // value нигде не написан(объявлен) т-к он являеться по умолчанию то есть то значение которые передает пользователь.
            }
            // Теперь мы можем использовать акссесор для чего? Более безопасный код.
            // Идем в наш Main

            // Можно было бы написать несколько методов но кулда лутше написать один компактный аксессор.
            // Так же можно написать и методы и условия и циклы внутри нашего аксессора.
            // Допишуц еще одну проверку.
        }

        // Аксессоры могут существовать сами по себе допустим
        public int Width { private get; set; }// Мы можем спокойно установить какие либо данные и получить эти данные (Похоже на поле)
        // Идем в наш Main
        // И так зачем? Мы можем так же ограничить доступ к получеию или установке в аксессор.(Добавлен модификатор доступа 'private' к 'get')
        // И да мы можем ограничитьб доступ полностью (для 'get' 'set' доступ 'private' или частично)

        // Конструкторы:
        public Robot(string name, int weight, byte[] coordinates)
        {
            System.Console.WriteLine("Object created"); 
            this.setValues(name, weight, coordinates); 
            count++; 
        }

        
        public Robot() {
            count++; // Подсчет методов 
        } 
       
        public Robot(string name)
        {
            this.name = name; 
            count++; 
        }

        // Инкапусуляция и методы:
        public void setValues(string name, int weight, byte[] coordinates){
            this.name = name; 
            this.weight = weight;
            this.coordinates = coordinates;
        }
        
        public void printValues(){
            System.Console.WriteLine(this.name + "weight" + this.weight);
            foreach (byte el in coordinates)
                System.Console.WriteLine(el);
        }

        // Статический метод:
        public static void Print(){
            System.Console.WriteLine("Count is: " + count);
        }
        
    }
}