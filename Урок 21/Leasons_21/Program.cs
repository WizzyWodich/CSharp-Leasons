using System;
// Абстрактные классы. Абстрактные методы
/* Абстрактные классы это классы в которых мы не можем создать ни одного объекта но внутри них мы описываем методы (мы так же можем реализовать
 * данные методы) но так же мы можем написать абстрактный метод который нужно реализовать в классе наследнике. Обычно создаються для описания 
 * общего объекта или общего действия и потом мы создаем на его основе множество классов наследников все они получают базу написаную в абстрактном классе
 * и уже на их основе мы можем создавать объекты а на основе абстрактного класса не можем.
*/


namespace Leasons_21
{

    class Program
    {
        static void Main(string[] args)
        {
            // У нас есть 'Robot class' он общий описывает всех возможных роботов

            // Меняем наш Robot на Bot (на его основе)
            Bot bot = new Bot("Bot", 900, new byte[] {12,12,12}); 
            bot.printValues();

            // У нас есть 'Killer class'
            /* Так же мы можем создать еще один класс который бы назывался 'Bot' и в таком случае когда у нас будет несколько классов
            мы можем сделать класс 'Robot' абстрактным так как мы уже не будем создавать объекты на его основе а будем создавать на основе 2-х других класов.
            тогда как 'Robot' будет описывать общие характеристики роботов.
            */
            // И так создадим файл Bot.cs и скопируем туда код из 'Killer.cs'
            Killer killer = new Killer("Killer", 1200, new byte[] {1,3,6}, 100); 
            killer.printValues(); 
            killer.Lazer();

            /* (*) Теперь после того как наш 'Robot' стал абстрактным я не могу использовать его класс для создания
            объекта я создаю объекты под определенный класс робота(Bot, Killer).
            Так как если будут создавать на основе глобального класса то не будет четкого пнимания.*/
            // Перейдем в Robot.cs к методу printValues()

            // Здесь мы пока нечего не меняем.(Пока не выдает ошибку пока мы не переписали наш 'Robot')
            // Переходим в Robot.cs
            Bot bot_1 = new Bot(); /* Теперь мы изменили наш класс 'Robot' и мы не можем на нем создать объект соотвецтвенно 
                                    теперь я не могу передать в параметры один аргумент т-к в моем дочернем классе 'Bot' нету 
                                    такого конструктора. (* ВЫШЕ ПРОДОЛЖЕНИЕ )*/
            bot_1.Weight = -100; 
            Console.WriteLine(bot_1.Weight); 
        
        }
    }
}
