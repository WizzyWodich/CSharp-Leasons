using System;

namespace Leasons_15{
    /*Класс Robot с полями*/
    
    /*В данном классе есть конструктор но мы его не видим то есть он не видимый а если точнее то это
    конструтор по умолчанию
    */

    /*Пример:
    Если бы у нас был класс для подключения к базе данных(БД) то можно написать конструктор который 
    сразу бы подключался к ней когда мы создаем обект на основе класса */

    /*Реализация конструкторов*/


    class Robot{

        // Создадим статическое поле
        private static int count;
        // Идем обратно в Main
        

        // Ниже про конструкторы и класс
        private string name; // Поле класса
        private int weight;  
        private byte[] coordinates;
        

        // Все конструторы имеют всегда модификаторы доступа public
        // Конструкторы нечего не возвращяют впринципе так что нам не нужно прописывать тип данных(даже void)
        // Конструктор всегда должен называеться как класс
        // public Robot(){} // Видымый конструктор по умолчанию (Даже в классе Program он такой же)
        public Robot(string _name, int _weight, byte[] _coordinates)// Теперь наш коструктор будет ожидать от нас аргументы при создании обекта в нашем Main 
        {
            System.Console.WriteLine("Object created"); // Вывод будет в консоль как только мы запустим код то есть 
                                                        // сразу сработает конструктор по умолчанию и выведет надпись.
            setValues(_name, _weight, _coordinates); 
            
            
            count++; // Подсчет методов 
        }

        // Мы могли и написать нашу функцию заполнения setValues() внуткри конструктора но допустим я не хочу а хочу что бы у меня была отдельная функция.
        // Смотрим наш Main
        
        // Конструкторов в классе может быть написано столько сколько мы хотим
        // Создадим конструктор который не будет принимать ни одного параметра.
        public Robot() {
            count++; // Подсчет методов 
        } 
        // Смотрим наш Main
        
        // Напишем конструктор который будет принимать только один аргумент.
        public Robot(string _name)// Теперь наш коструктор будет ожидать от нас один аргумент(параметр) при создании обекта в нашем Main 
        {
            name = _name; // Мы можем сразу сделать инициализацию дабы не вызывать функцию.
            count++; // Подсчет методов 
        }



        /* Инкапсуляция. Так как мы не имеем доступа к полям в Main то нам нужно как то 
            инициализировать приватные поля класа
        */
        public void setValues(string _name, int _weight, byte[] _coordinates){
            name = _name;
            weight = _weight;
            coordinates = _coordinates;
        }
        
        // Метод вывода
        public void printValues(){
            System.Console.WriteLine(name + "weight" + weight);
            foreach (byte el in coordinates)
                System.Console.WriteLine(el);
        }




        // Созадем статический метод вывода.
        public static void Print(){
            System.Console.WriteLine("Count is: " + count);
        }
        // Идем обратно в Main
        
    }
}