using System;

namespace Leasons_18{
    /* Для того что бы сделать наследование применяем такую конструкцию
        <class> <Название класса наследника> <:> <Название родительского класса от которо мы наследуем> 
        !! Примечание наследуеться все что имеет доступ 'public' или 'protected'
     */

     class Killer : Robot // Теперь мы наследуем все что есть в классе Robot то есть если даже класс Killer будет пустым мы все равно имеем все что есть у класса Robot 
     // Перейдем в Main

     // Допишем аксессор
     {
        public int Healts{ get; set; } // Теперь в Main мы имеем доступ к аксессору через объект. Переходим в Main.
        // Допишем сюда метод

        // Напишем конструктор 
        public Killer(){} // Конструктор по уммолчанию


        // base() - Обращение к классе родителю в скобки указывать те параметры которые передавать в класс рродителя а уже там они передадуться в конструктор который подойдет по параметрам.
        public Killer(string name, int weight, byte[] coordinates, int healts) : base(name, weight, coordinates)
        {
            // Передам в наш аксессор только один параметр все остальные я передам в класс родитель.
            this.Healts = healts;
            // Перейдем в Main.

            // Допустим мне нужно вызвать метод из класса родителя в дочерний 
            // Допустим я установил все значения и хочу вызвать метод printValues для этого можно просто есго вызвать по обычному так скажем но куда лутше делать таким образом:
            base.printValues();
            // Идем в наш Main
        }

        public void Lazer(){
            System.Console.WriteLine("Lazer shooting"); // Перейдем в Main
            this.sName = "Botinochek"; // Наше поле c модификатором доступа protected.
        }

     }



}